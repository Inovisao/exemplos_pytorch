# -*- coding: utf-8 -*-
"""exemplo_pytorch_v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eqZbgFoN2GLNFBreSx1Rp7DmU6b3Di7E

## Tutorial Introdutório de Pytorch (v2)
Traduzido e adaptado do site oficial do python: https://pytorch.org/tutorials/beginner/basics/quickstart_tutorial.html por Hemerson Pistori (pistori@ucdb.br)

Mudanças desta versão:

- Implementação de parada antecipada (Early Stopping)
- Leitura de uma conjunto de teste a partir das imagens em pastas
- Mostrar gráfico de perda e acurácia por época
- Mostrar métricas de precisão, revocação e medida-F por classe e total
- Mostrar matriz de confusão

## Carregando um banco de imagens
"""

import torch   # Biblioteca pytorch principal
from torch import nn  # Módulo para redes neurais (neural networks)
from torch.utils.data import DataLoader # Manipulação de bancos de imagens
from torchvision import datasets # Ajuda a importar alguns bancos já prontos e famosos
from torchvision.transforms import ToTensor # Realiza transformações nas imagens
import torchvision.transforms as transforms
import matplotlib.pyplot as plt # Mostra imagens e gráficos
from torch.utils.tensorboard import SummaryWriter
import torchvision

# Definindo alguns hiperparâmetros importantes:
epocas = 100  # Total de passagens durante a aprendizagem pelo conjunto de imagens
tamanho_lote = 64  # Tamanho de cada lote sobre o qual é calculado o gradiente
taxa_aprendizagem = 0.001   # Magnitude das alterações nos pesos
paciencia = 5  # Total de épocas sem melhoria da acurácia na validação até parar
tolerancia = 0.01 # Melhoria menor que este valor não é considerada melhoria

pasta_imagens_teste = "data/FashionMNIST_custom_testset/"

# Definindo os dados para treinamento da rede neural
# Utiliza uma base de imagens de roupas chamada FashionMNIST
training_data = datasets.FashionMNIST(
    root="data",  # Pasta onde ficarão os dados
    train=True,   # Usa apenas dados de treinamento
    download=True,  # Faz download dos dados pela Internet 
    transform=ToTensor(),  # Converte do formato jpg para um tensor
)

# Definindo os dados para validação da rede neural
val_data = datasets.FashionMNIST(
    root="data",
    train=False,
    download=True,
    transform=ToTensor(),
)

# Cria os objetos que irão manipular os dados
train_dataloader = DataLoader(training_data, batch_size=tamanho_lote)
val_dataloader = DataLoader(val_data, batch_size=tamanho_lote)

# Mostra informações do primeiro lote de imagens 
# X vai conter um lote de imagens
# y vai conter as classes (tipo de roupa) de cada imagem do lote
for X, y in val_dataloader:
    print(f"Tamanho do lote de imagens: {X.shape[0]}")
    print(f"Quantidade de canais: {X.shape[1]}")
    print(f"Altura de cada imagem: {X.shape[2]}")
    print(f"Largura de cada imagem: {X.shape[3]}")
    print(f"Tamanho do lote de classes (labels): {y.shape[0]}")
    print(f"Tipo de cada classe: {y.dtype}")
    break  # Para depois de mostrar os dados do primeiro lote

print(f"Total de imagens de treinamento: {len(training_data)}")
print(f"Total de imagens de validação: {len(val_data)}")

"""### Mostrando algumas imagens"""

# Definindo o nome de cada classe (que a principio é apenas
# um número)
labels_map = {
     0: "Camiseta",
     1: "Calcas",
     2: "Pulover",
     3: "Vestido",
     4: "Casaco",
     5: "Sandalia",
     6: "Camisa",
     7: "Tenis",
     8: "Bolsa",
     9: "Bota_de_Tornozelo",    
}

figure = plt.figure(figsize=(8, 8))  # Cria o local para mostrar as imagens
cols, rows = 3, 3  # Irá mostrar 9 imagens em uma grade 3x3
for i in range(1, cols * rows + 1):
    # Gera um número aleatório menor que o total de imagens disponíveis
    sample_idx = torch.randint(len(training_data), size=(1,)).item()
    # Pega a imagem e sua classificação usando o número aleatório
    img, label = training_data[sample_idx]
    # Adiciona a imagem na grade que será mostrada
    figure.add_subplot(rows, cols, i)
    # Usa a classe da imagem como título da imagem
    plt.title(labels_map[label])
    # Não mostra valores para os eixos X e Y
    plt.axis("off")
    # Avisa que é uma imagem em tons de cinza 
    # o squeeze garante que vai pegar apenas um canal da imagem
    plt.imshow(img.squeeze(), cmap="gray")
    
plt.show() # Este é o comando que vai mostrar as imagens

"""## Definindo uma rede neural artificial"""

# Verifica se tem GPU na máquina, caso contrário, usa a CPU mesmo
device = "cuda" if torch.cuda.is_available() else "cpu"
print(f"Usando {device}")

# Define uma rede neural artificial a partir 
# da classe nn do pytorch
class NeuralNetwork(nn.Module):
    def __init__(self):

        # Inicializa a classe "pai"
        super(NeuralNetwork, self).__init__()

        # Cria uma camada para achatar a imagem (transformar
        # de 2 dimensões para uma dimensão)
        self.flatten = nn.Flatten()

        # Cria uma sequência com 3 camadas
        #
        # - uma linear com 784 (28*28) neurônios entrando e 512 saindo e ativação ReLU
        # - outra linear com 512 neurônios entrando e 512 saindo e ativação ReLU
        # - e a última com 512 neurônios entrando e 10 saindo (as 10 classes
        #   do problema)
        #
        # A camada linear é tambem chamada de completamente conectada ou Densa
        self.linear_relu_stack = nn.Sequential(
            nn.Linear(28*28, 512),
            nn.ReLU(),
            nn.Linear(512, 512),
            nn.ReLU(),
            nn.Linear(512, 10)
        )

    # Define como funcionará o passo "para frente" (forward)
    # do algoritmo de retropropagação (backpropagation)
    def forward(self, x):
        # Realiza o achatamento do tensor 
        # Transforma um matriz 28*28 em um vetor com 784 posições
        x = self.flatten(x)
        # Aplica todas as camadas em sequência e guarda o resultado final da
        # última camada (é aqui que acontece a ativação dos neurônios)
        output_values = self.linear_relu_stack(x)
        return output_values

# Prepara a rede para o dispositivo que irá processá-la
model = NeuralNetwork().to(device)

# Imprime dados sobre a arquitetura da rede
print(model)

# Define o otimizador como sendo descida de gradiente estocástica
otimizador = torch.optim.SGD(model.parameters(), lr=taxa_aprendizagem)

# Define a função de perda como entropia cruzada
funcao_perda = nn.CrossEntropyLoss()

# Cria o módulo do tensorboard de coleta de dados
writer = SummaryWriter()

# Define a função para treinar a rede
# dataloader = módulo que manipula o conjunto de imagens
# model = arquitetura da rede
# loss_fn = função de perda
# optimizer = otimizador 
def train(dataloader, model, loss_fn, optimizer):
    size = len(dataloader.dataset)
    num_batches = len(dataloader)   # Total de lotes
    model.train()

    train_loss, train_correct = 0, 0

    # Pega um lote de imagens de cada vez do conjunto de treinamento
    for batch, (X, y) in enumerate(dataloader):

        X, y = X.to(device), y.to(device)  # Prepara os dados para o dispositivo (GPU ou CPU)
        pred = model(X)         # Realiza uma previsão usando os pesos atuais
        loss = loss_fn(pred, y) # Calcula o erro com os pesos atuais

        train_loss += loss_fn(pred, y).item() # Guarda para calcular a perda média
        train_correct += (pred.argmax(1) == y).type(torch.float).sum().item() # Guarda para calcular acurácia

        optimizer.zero_grad()  # Zera os gradientes pois vai acumular para todas
                               # as imagens do lote
        loss.backward()        # Retropropaga o gradiente do erro
        optimizer.step()       # e recalcula todos os pesos da rede

        # Imprime informação a cada 100 lotes processados 
        if batch % 100 == 0:
            # Mostra a perda e o total de imagens já processadas
            loss, current = loss.item(), batch * len(X)
            print(f"Perda: {loss:>7f}  [{current:>5d}/{size:>5d}]")

    train_loss /= num_batches
    train_acuracia = train_correct / size

    return train_loss, train_acuracia        

# Define a função de validação
def validation(dataloader, model, loss_fn):
    size = len(dataloader.dataset)  # Total de imagens para validação
    num_batches = len(dataloader)   # Total de lotes
    model.eval()  # Coloca a rede em modo de avaliação (e não de aprendizagem)
    # Vai calcular o erro no conjunto de validação
    val_loss, val_correct = 0, 0

    # Na validação os pesos não são ajustados e por isso não precisa
    # calcular o gradiente
    with torch.no_grad():
        for X, y in dataloader:
            X, y = X.to(device), y.to(device)
            pred = model(X)
            val_loss += loss_fn(pred, y).item()
            val_correct += (pred.argmax(1) == y).type(torch.float).sum().item()

    val_loss /= num_batches
    val_acuracia = val_correct / size

    print("Informações na Validação:")
    print(f"Total de acertos: {int(val_correct)}")
    print(f"Total de imagens: {size}")
    print(f"Perda média: {val_loss:>8f}")            
    print(f"Acurácia: {(100*val_acuracia):>0.2f}%")
    return val_loss, val_acuracia

"""## Treinando a Rede Neural (Aprendizagem)"""

# Passa por todas as imagens várias vezes (a quantidade de vezes
# é definida pelo hiperparâmetro "epocas")

maior_acuracia = 0
total_sem_melhora = 0
for epoca in range(epocas):
    print(f"-------------------------------")
    print(f"Época {epoca+1} \n-------------------------------")
    train_loss, train_acuracia = train(train_dataloader, model, funcao_perda, otimizador)
    val_loss, val_acuracia = validation(val_dataloader, model, funcao_perda)

    writer.add_scalars('Loss', {'train':train_loss,'val':val_loss}, epoca)
    writer.add_scalars('Accuracy', {'train':train_acuracia,'val':val_acuracia}, epoca)

    if val_acuracia > maior_acuracia+tolerancia: 
      maior_acuracia = val_acuracia
      total_sem_melhora = 0
    else: 
      total_sem_melhora += 1 
      print(f"Sem melhora há {total_sem_melhora} épocas")
    if total_sem_melhora > paciencia:
      print(f"Acabou a paciência com {epoca+1} épocas ")
      break

print("Terminou a fase de aprendizagem !")

# Pega algumas imagens para o tensorboard
images, labels = next(iter(train_dataloader))
grid = torchvision.utils.make_grid(images)
writer.add_image('images', grid, 0)
#writer.add_graph(model, images)
writer.close()

"""## Visualização usando Tensorboard

"""

# Commented out IPython magic to ensure Python compatibility.
# %load_ext tensorboard
# %tensorboard --logdir=runs

"""# Salvando a rede treinada


"""

# Salva em disco os pesos da rede treinada para ser usada
# posteriormente (sem precisar aprender novamente)

torch.save(model.state_dict(), "modelo_treinado.pth")
print("Salvou o modelo treinado em modelo_treinado.pth")

"""## Carregando a rede treinada anteriormente e usando


"""

model = NeuralNetwork()
model.load_state_dict(torch.load("modelo_treinado.pth"))

"""## Usando a rede treinada para classificar imagens 

Usando um conjunto de teste próprio que será lido do disco
"""



# Commented out IPython magic to ensure Python compatibility.
# Vai baixar o banco de imagens de teste, colocar na pasta data e descompactar
# %curl -L -o FashionMNIST_custom_testset.zip "https://drive.google.com/uc?export=download&id=1Qx-VUrqO0S0OI8CojxVvEkA_JdpocTrE"
# %mv Fash*.zip ./data/
# %cd ./data/
# %unzip Fash*.zip
# %cd ..

# Classifica uma única imagem 
# model: rede a ser usada
# x: imagem
# y: classificação real da imagem
# predita: classificação dada pela rede
def classifica_uma_imagem(model,x,y):
    model.eval()
    with torch.no_grad():
       pred = model(x)
       predita, real = labels_map[int(pred[0].argmax(0))], labels_map[y]
       print(f'Predita: "{predita}", Real: "{real}"')
    return(predita)

# Carrega o banco de imagens de teste aplicando as transformações
# necessárias
test_data = datasets.ImageFolder(root=pasta_imagens_teste,
                                    transform=transforms.Compose(
                                        [  transforms.Resize((28,28)),
                                           transforms.Grayscale(num_output_channels=1),
                                           transforms.ToTensor()
                                        ])
                                 )     

# Vai mostrar a classificação da rede para 16 imagens do conjunto de teste
figure = plt.figure(figsize=(8, 8))  # Cria o local para mostrar as imagens
cols, rows = 4, 4  # Irá mostrar 16 imagens em uma grade 4x4
print(f"Testando em {len(test_data)} imagens. Resultados:")
for i in range(len(test_data)):
    img, label = test_data[i]
    # Classifica a imagem usando a rede treinada
    predita = classifica_uma_imagem(model,img,label)
    # Adiciona a imagem na grade que será mostrada
    figure.add_subplot(rows, cols, i+1)
    # Usa a classe da imagem como título da imagem
    plt.title(predita)
    # Não mostra valores para os eixos X e Y
    plt.axis("off")
    # Avisa que é uma imagem em tons de cinza 
    # o squeeze garante que vai pegar apenas um canal da imagem
    plt.imshow(img.squeeze(), cmap="gray")
    
plt.show() # Este é o comando que vai mostrar as imagens